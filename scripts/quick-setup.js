#!/usr/bin/env node

/**
 * üöÄ QUICK SETUP - NAREGUA + INFINITY-DB
 * Script para configura√ß√£o completa em um comando
 */

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

console.log('üöÄ NAREGUA + INFINITY-DB QUICK SETUP');
console.log('=====================================\n');

async function quickSetup() {
    try {
        const rootPath = __dirname;
        const infinityDbPath = path.join(rootPath, 'Infinity-DB');
        
        // 1. Verificar se Infinity-DB existe
        console.log('1. üìÅ Verificando estrutura de arquivos...');
        if (!fs.existsSync(infinityDbPath)) {
            console.error('‚ùå Pasta Infinity-DB n√£o encontrada!');
            console.log('üí° Certifique-se de que a pasta Infinity-DB est√° no projeto');
            return false;
        }
        console.log('‚úÖ Infinity-DB encontrado');
        
        // 2. Instalar depend√™ncias do projeto principal
        console.log('\n2. üì¶ Instalando depend√™ncias do projeto principal...');
        await execAsync('npm install', { 
            cwd: rootPath,
            stdio: 'inherit'
        });
        console.log('‚úÖ Depend√™ncias principais instaladas');
        
        // 3. Verificar se .env existe
        console.log('\n3. üîß Verificando configura√ß√£o...');
        const envPath = path.join(rootPath, '.env');
        
        if (!fs.existsSync(envPath)) {
            console.log('üìù Criando arquivo .env...');
            
            const envTemplate = `# ===================================================================
# üîÑ NAREGUA BARBERAPP + INFINITY-DB - CONFIGURA√á√ÉO
# ===================================================================

# BANCO PRIM√ÅRIO (Obrigat√≥rio) - Substitua pela sua URL do Neon
DATABASE_URL='postgresql://usuario:senha@host1.neon.tech/database1?sslmode=require'

# BANCO SECUND√ÅRIO (Obrigat√≥rio para backup autom√°tico) - Substitua pela sua URL do Neon
DATABASE_URL_BACKUP='postgresql://usuario:senha@host2.neon.tech/database2?sslmode=require'

# ===================================================================
# üìß CONFIGURA√á√ïES DE EMAIL (Para notifica√ß√µes)
# ===================================================================
SMTP_HOST=smtp.gmail.com
SMTP_PORT=465
SMTP_USER=seu_email@gmail.com
SMTP_PASS=sua_senha_de_app
SMTP_FROM=NaR√©gua Barbearia <seu_email@gmail.com>

# ===================================================================
# üîÑ INFINITY-DB - CONFIGURA√á√ïES OPCIONAIS
# ===================================================================

# Token para API de controle (recomendado)
API_TOKEN=naregua-infinity-token-2025

# Porta para dashboard (padr√£o: 3001)
PORT=3001

# Ambiente de execu√ß√£o
NODE_ENV=development
`;
            
            fs.writeFileSync(envPath, envTemplate);
            console.log('‚úÖ Arquivo .env criado');
        } else {
            console.log('‚úÖ Arquivo .env j√° existe');
        }
        
        // 4. Configurar Infinity-DB
        console.log('\n4. üîÑ Configurando Infinity-DB...');
        
        // Verificar se depend√™ncias do Infinity-DB est√£o instaladas
        const infinityNodeModules = path.join(infinityDbPath, 'node_modules');
        if (!fs.existsSync(infinityNodeModules)) {
            console.log('üì¶ Instalando depend√™ncias do Infinity-DB...');
            await execAsync('npm install', { 
                cwd: infinityDbPath,
                stdio: 'inherit'
            });
            console.log('‚úÖ Depend√™ncias do Infinity-DB instaladas');
        } else {
            console.log('‚úÖ Depend√™ncias do Infinity-DB j√° instaladas');
        }
        
        console.log('\nüéâ SETUP CONCLU√çDO COM SUCESSO!');
        console.log('===============================');
        
        console.log('\nüìã RESUMO DO QUE FOI CONFIGURADO:');
        console.log('‚úÖ Depend√™ncias do projeto principal instaladas');
        console.log('‚úÖ Depend√™ncias do Infinity-DB instaladas');
        console.log('‚úÖ Arquivo .env criado/verificado');
        console.log('‚úÖ Sistema de backup autom√°tico configurado');
        
        console.log('\nüîß PR√ìXIMOS PASSOS OBRIGAT√ìRIOS:');
        console.log('================================');
        console.log('1. üìù EDITE o arquivo .env e configure suas URLs do Neon:');
        console.log('   ‚Ä¢ DATABASE_URL=sua_url_do_banco_primario');
        console.log('   ‚Ä¢ DATABASE_URL_BACKUP=sua_url_do_banco_secundario');
        console.log('');
        console.log('2. üóÑÔ∏è INICIALIZE o banco secund√°rio:');
        console.log('   npm run infinity-db:init-simple');
        console.log('');
        console.log('3. üöÄ INICIE a aplica√ß√£o:');
        console.log('   npm start');
        
        console.log('\nüìä MONITORAMENTO DISPON√çVEL:');
        console.log('============================');
        console.log('‚Ä¢ üåê Aplica√ß√£o Principal:    http://localhost:3000');
        console.log('‚Ä¢ üéõÔ∏è Dashboard Admin:        http://localhost:3000/dashboard/dashboard');
        console.log('‚Ä¢ üîÑ Dashboard Infinity-DB:  http://localhost:3000/infinity-db/ui/dashboard');
        console.log('‚Ä¢ üìà Status do Sistema:      npm run infinity-db:status');
        
        console.log('\nüí° COMANDOS √öTEIS:');
        console.log('==================');
        console.log('‚Ä¢ npm run infinity-db:status    - Ver status dos bancos');
        console.log('‚Ä¢ npm run infinity-db:backup    - For√ßar backup manual');
        console.log('‚Ä¢ npm run infinity-db:test      - Testar sistema completo');
        console.log('‚Ä¢ npm start                     - Iniciar aplica√ß√£o');
        console.log('‚Ä¢ npm run dev                   - Modo desenvolvimento');
        
        console.log('\nüéØ BENEF√çCIOS ATIVADOS:');
        console.log('=======================');
        console.log('‚úÖ Backup autom√°tico nos dias 24-25 de cada m√™s');
        console.log('‚úÖ Altern√¢ncia inteligente entre bancos');
        console.log('‚úÖ Fallback transparente em caso de falha');
        console.log('‚úÖ Monitoramento completo com dashboard');
        console.log('‚úÖ Zero preocupa√ß√£o com limites de horas do Neon');
        
        return true;
        
    } catch (error) {
        console.error('\n‚ùå Erro no setup:', error.message);
        console.log('\nüîß SOLU√á√ÉO MANUAL:');
        console.log('==================');
        console.log('1. npm install');
        console.log('2. cd Infinity-DB && npm install');
        console.log('3. Configure .env com suas URLs do Neon');
        console.log('4. npm run infinity-db:init-simple');
        console.log('5. npm start');
        return false;
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    quickSetup().then(success => {
        if (success) {
            console.log('\nüöÄ Sistema pronto! Configure o .env e execute: npm start');
        }
        process.exit(success ? 0 : 1);
    });
}

module.exports = quickSetup;
